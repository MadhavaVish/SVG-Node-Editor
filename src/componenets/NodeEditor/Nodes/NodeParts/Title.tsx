import * as React from 'react';
import {useState,useRef,useEffect} from 'react';
import Styled from 'styled-components';
//Input field styled to look identical to p element with a slightly darker background to indicate its state.
const Inp = Styled.input`
    box-sizing: border-box;
    width: 100%;
    padding: 5px;
    font-size: 0.9em;
    border-radius: 3px 3px 0 0;
    background: #777;
    border: none;
    margin: 0;
    :focus{
        outline: none;
    }
`;
interface Props{
    title: string
}
/**
 * Title element to act as a header for the nodes. Allows changing the title dynamically.
 * @param title is the only passed prop to this component.
 * Note: the react forwardref allows for pasing in a ref generated by a parent component to its child before it is initialized with a DOM node.
 *       This is necessary when we don't want to create a wrapper in the parent component.
 */
const Title = React.forwardRef((props: Props, ref: React.Ref<HTMLDivElement>)=>{
    const [changeTitle, toggleState] = useState(false);
    const [title, setTitle] = useState(props.title);

    const inputRef: React.MutableRefObject<HTMLInputElement> = useRef();

    useEffect(()=>{
        if(changeTitle){
            inputRef.current.focus(); //set focus on input element when the changeTitle state is active.
        }
    });
    //toggle the state to static p tag when the user presses the return key.
    const confirmInput = (e)=>{
        if (!e) e = window.event;
        let keyCode = e.keyCode || e.which;
        if (keyCode == '13'){
            toggleState(!changeTitle);
          }
    }
    const p = (
        <p>{title}</p>
    );
    const input = (
        <Inp ref={inputRef} onKeyPress={(e)=>{confirmInput(e)}} onChange={(e)=>{setTitle(e.target.value);}}defaultValue={title}/>
    );
    return(
        <div ref={ref}  className="title" onDoubleClick={(e)=>{toggleState(!changeTitle);}}>
            {changeTitle? input : p}
        </div>
    );
});

export default Title;